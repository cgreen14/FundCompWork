report.txt
Worked in pairs:
Daniel Burns
Connor Green
Submitted in Daniel Burns dropBox

User:
From the users perspective to work and operate the program is a rather simple
task.  There are required to either have a text file, which is put in on the
runline, or if they simply run the executable that the makefile creates, the
user will then be prompted to enter a list of words followed by a period.
Internally the program keeps track of the length and size of the list of words
that the user is creating, and then once the user starts the second step will
check these values against the rules of the board.  After the list is entered
the users interaction is done, they will see a board with the solutions, a
second board with a blank crossword, and finally clues to solving the puzzle.
If the user used three input arguments, with valid formatting (space and .txt)
then the program will save the crossword in a text file to be accessed later.


Programmer:
At the programming level most of the work is done in the class, Puzzle. Starting
from the top down, mains primary actions is to make a decision based on the
number on input arguments.  Once this is done it reads in using ifstream or cin
(choice depending)and the addWord member function.  The words are sorted by size
as they enter into the vector until the user or files input is complete. Once
inside the program places the first word on to the board in the middle.  It then
goes through and attempts to find the first letter of the next word in the
vector.  Once it has that match it checks in the up, down, right, and left to
see if it has found a match in a horizontal or vertical word. Then it goes
then it checks the bounds along the length of the proposed string, returning a
0 (not valid) if it violates one of the rules. (if this happens the program will
kick to the next letter in the word and if no match eventually grab the next
word in the vector).  If the proposed match passes the test the orientation
returns the way that the word should be placed, and the word is printed on to
the board. Once a word is printed the program iterates to the next word until
the vector has been run through in it entirety.

The clues are generated by searching through the board for the start of each
word in the vector, if a match is found it then confirms that this is the
placement of the correct word using the orientation. If that passes a the
location of the start of the word (location of match), and a scrambled version
of the string (the word) present at the current place in the array.

The key board is the only board that needs to be created, since we print the
second board based on the char present in the board array.  These two print outs
in conjunction with the clues then provides the user with a generated Crossword
based on his or her input.

Evaluation:
The evaluation of this code was done in stages. We started by simply
placing the first word on the board.  Then we progressed to a second and third
word.  Once the program was doing this correctly we added the rules of design
as dictated by the lab.  This involved us using our knowledge of the placing
algorithm to put in words that if just placed after finding a letter would
create the wrong board, and tweaking the checks until the rules were followed.
The last thing we did was the hints.  We initially ran into trouble with very
short words and words that were part of others (like putting run and runs on
the same board).  We addressed this by changing the bounds on out orientation
check, as in this case we were not checking the last letter of the string
against its self when identifying if we had found a word placed on the board.
This allowed us to give our program functionality regardless of the ways strings
were substrings of one another.
